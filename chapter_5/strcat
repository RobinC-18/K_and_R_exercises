	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 10, 15	sdk_version 10, 15, 6
	.globl	_strcatmine             ## -- Begin function strcatmine
	.p2align	4, 0x90
_strcatmine:                            ## @strcatmine
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	.p2align	4, 0x90
LBB0_1:                                 ## =>This Inner Loop Header: Depth=1
	movq	%rdi, %rcx
	incq	%rdi
	cmpb	$0, (%rcx)
	jne	LBB0_1
## %bb.2:
	movb	(%rsi), %al
	testb	%al, %al
	je	LBB0_6
## %bb.3:
	movq	$-1, %rcx
	.p2align	4, 0x90
LBB0_4:                                 ## =>This Inner Loop Header: Depth=1
	movb	%al, (%rdi,%rcx)
	movzbl	2(%rsi,%rcx), %eax
	incq	%rcx
	testb	%al, %al
	jne	LBB0_4
## %bb.5:
	addq	%rcx, %rdi
	movq	%rdi, %rcx
LBB0_6:
	movb	$0, (%rcx)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_strncatmine            ## -- Begin function strncatmine
	.p2align	4, 0x90
_strncatmine:                           ## @strncatmine
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	.p2align	4, 0x90
LBB1_1:                                 ## =>This Inner Loop Header: Depth=1
	movq	%rdi, %rax
	incq	%rdi
	cmpb	$0, (%rax)
	jne	LBB1_1
## %bb.2:
	testq	%rdx, %rdx
	je	LBB1_7
## %bb.3:
	movb	(%rsi), %cl
	testb	%cl, %cl
	je	LBB1_7
## %bb.4:
	movl	$1, %eax
	.p2align	4, 0x90
LBB1_5:                                 ## =>This Inner Loop Header: Depth=1
	movb	%cl, -2(%rdi,%rax)
	leaq	1(%rax), %r8
	cmpq	%rdx, %rax
	jae	LBB1_6
## %bb.8:                               ##   in Loop: Header=BB1_5 Depth=1
	movzbl	(%rsi,%rax), %ecx
	movq	%r8, %rax
	testb	%cl, %cl
	jne	LBB1_5
LBB1_6:
	leaq	-2(%rdi,%r8), %rax
LBB1_7:
	movb	$0, (%rax)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_strendmine             ## -- Begin function strendmine
	.p2align	4, 0x90
_strendmine:                            ## @strendmine
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	.p2align	4, 0x90
LBB2_1:                                 ## =>This Inner Loop Header: Depth=1
	cmpb	$0, (%rdi)
	leaq	1(%rdi), %rdi
	jne	LBB2_1
## %bb.2:
	movl	$1, %eax
	cmpb	$0, (%rsi)
	je	LBB2_9
## %bb.3:
	xorl	%ecx, %ecx
	.p2align	4, 0x90
LBB2_4:                                 ## =>This Inner Loop Header: Depth=1
	cmpb	$0, 1(%rsi,%rcx)
	leaq	1(%rcx), %rcx
	jne	LBB2_4
## %bb.5:
	movq	$-1, %rdx
	movl	%ecx, %r8d
	.p2align	4, 0x90
LBB2_6:                                 ## =>This Inner Loop Header: Depth=1
	cmpl	$2, %r8d
	jl	LBB2_9
## %bb.7:                               ##   in Loop: Header=BB2_6 Depth=1
	leaq	(%rsi,%rdx), %r9
	decl	%r8d
	movzbl	-1(%rdi,%rdx), %r10d
	decq	%rdx
	cmpb	(%r9,%rcx), %r10b
	je	LBB2_6
## %bb.8:
	xorl	%eax, %eax
LBB2_9:
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_strncmpmine            ## -- Begin function strncmpmine
	.p2align	4, 0x90
_strncmpmine:                           ## @strncmpmine
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	testq	%rdx, %rdx
	je	LBB3_7
## %bb.1:
	movb	(%rdi), %r8b
	testb	%r8b, %r8b
	je	LBB3_7
## %bb.2:
	movl	$1, %ecx
	.p2align	4, 0x90
LBB3_3:                                 ## =>This Inner Loop Header: Depth=1
	movsbl	-1(%rsi,%rcx), %r9d
	cmpb	%r9b, %r8b
	jne	LBB3_6
## %bb.4:                               ##   in Loop: Header=BB3_3 Depth=1
	cmpq	%rdx, %rcx
	jae	LBB3_7
## %bb.5:                               ##   in Loop: Header=BB3_3 Depth=1
	movzbl	(%rdi,%rcx), %r8d
	incq	%rcx
	testb	%r8b, %r8b
	jne	LBB3_3
LBB3_7:
	popq	%rbp
	retq
LBB3_6:
	movsbl	%r8b, %eax
	subl	%r9d, %eax
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_strncpymine            ## -- Begin function strncpymine
	.p2align	4, 0x90
_strncpymine:                           ## @strncpymine
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	testq	%rdx, %rdx
	je	LBB4_6
## %bb.1:
	movb	(%rdi), %r8b
	testb	%r8b, %r8b
	je	LBB4_6
## %bb.2:
	xorl	%eax, %eax
	.p2align	4, 0x90
LBB4_3:                                 ## =>This Inner Loop Header: Depth=1
	movb	%r8b, (%rsi,%rax)
	leaq	1(%rax), %rcx
	cmpq	%rdx, %rcx
	jae	LBB4_5
## %bb.4:                               ##   in Loop: Header=BB4_3 Depth=1
	movzbl	1(%rdi,%rax), %r8d
	movq	%rcx, %rax
	testb	%r8b, %r8b
	jne	LBB4_3
LBB4_5:
	addq	%rcx, %rsi
LBB4_6:
	movb	$0, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal16,16byte_literals
	.p2align	4               ## -- Begin function main
LCPI5_0:
	.long	1127219200              ## 0x43300000
	.long	1160773632              ## 0x45300000
	.long	0                       ## 0x0
	.long	0                       ## 0x0
LCPI5_1:
	.quad	4841369599423283200     ## double 4503599627370496
	.quad	4985484787499139072     ## double 1.9342813113834067E+25
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3
LCPI5_2:
	.quad	4696837146684686336     ## double 1.0E+6
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movaps	l___const.main.s(%rip), %xmm0
	movaps	%xmm0, -64(%rbp)
	movq	$0, -42(%rbp)
	movq	$6778473, -48(%rbp)     ## imm = 0x676E69
	movabsq	$31078196311323680, %rax ## imm = 0x6E697473657420
	movq	%rax, -72(%rbp)
	callq	_clock
	movq	%rax, %r14
	xorl	%eax, %eax
	leaq	-65(%rbp), %rcx
	jmp	LBB5_1
	.p2align	4, 0x90
LBB5_6:                                 ##   in Loop: Header=BB5_1 Depth=1
	movl	$1, %ebx
	incl	%eax
	cmpl	$100000000, %eax        ## imm = 0x5F5E100
	je	LBB5_7
LBB5_1:                                 ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB5_2 Depth 2
                                        ##     Child Loop BB5_4 Depth 2
                                        ##     Child Loop BB5_5 Depth 2
	movq	%rcx, %rsi
	.p2align	4, 0x90
LBB5_2:                                 ##   Parent Loop BB5_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%rsi, %rdx
	incq	%rsi
	cmpb	$0, 1(%rdx)
	jne	LBB5_2
## %bb.3:                               ##   in Loop: Header=BB5_1 Depth=1
	movl	$1, %edi
	xorl	%ebx, %ebx
	.p2align	4, 0x90
LBB5_4:                                 ##   Parent Loop BB5_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movq	%rdi, %rsi
	incq	%rdi
	cmpb	$0, -71(%rbp,%rbx)
	leaq	1(%rbx), %rbx
	jne	LBB5_4
	.p2align	4, 0x90
LBB5_5:                                 ##   Parent Loop BB5_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	cmpl	$2, %esi
	jl	LBB5_6
## %bb.9:                               ##   in Loop: Header=BB5_5 Depth=2
	movzbl	(%rdx), %ebx
	decq	%rdx
	cmpb	-73(%rbp,%rsi), %bl
	leaq	-1(%rsi), %rsi
	je	LBB5_5
## %bb.10:                              ##   in Loop: Header=BB5_1 Depth=1
	xorl	%ebx, %ebx
	incl	%eax
	cmpl	$100000000, %eax        ## imm = 0x5F5E100
	jne	LBB5_1
LBB5_7:
	callq	_clock
	movq	%rax, %r15
	leaq	L_.str(%rip), %rdi
	movl	%ebx, %esi
	xorl	%eax, %eax
	callq	_printf
	subq	%r14, %r15
	movq	%r15, %xmm1
	punpckldq	LCPI5_0(%rip), %xmm1 ## xmm1 = xmm1[0],mem[0],xmm1[1],mem[1]
	subpd	LCPI5_1(%rip), %xmm1
	movapd	%xmm1, %xmm0
	unpckhpd	%xmm1, %xmm0    ## xmm0 = xmm0[1],xmm1[1]
	addsd	%xmm1, %xmm0
	divsd	LCPI5_2(%rip), %xmm0
	leaq	L_.str.1(%rip), %rdi
	movb	$1, %al
	callq	_printf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-32(%rbp), %rax
	jne	LBB5_12
## %bb.8:
	xorl	%eax, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB5_12:
	callq	___stack_chk_fail
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__const
	.p2align	4               ## @__const.main.s
l___const.main.s:
	.asciz	"I am really testing\000\000\000\000\000\000\000\000\000\000"

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"strend res: %d \n"

L_.str.1:                               ## @.str.1
	.asciz	"%f\n"

.subsections_via_symbols
